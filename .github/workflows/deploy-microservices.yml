name: Deploy Microservices to GCP

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PROJECT_ID: molten-avenue-460900-a0
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: core-medical-service
            port: 8000
            path: services/core-medical-service
            db_instance: core-medical-db
          - name: exams-service
            port: 8001
            path: services/exams-service
            db_instance: exams-db
          - name: diagnosis-service
            port: 8002
            path: services/diagnosis-service
            db_instance: diagnosis-db
          - name: surgery-service
            port: 8003
            path: services/surgery-service
            db_instance: surgery-db

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Configure Docker to use gcloud as a credential helper'
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}

      - name: 'Build Docker image'
        run: |
          cd ${{ matrix.service.path }}
          docker build -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }} .
          docker tag ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }} ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest

      - name: 'Push Docker image'
        run: |
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest

      - name: 'Deploy to Cloud Run'
        run: |
          gcloud run deploy ${{ matrix.service.name }} \
            --image=${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ matrix.service.db_instance }} \
            --set-env-vars="DEBUG=False" \
            --set-env-vars="DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ matrix.service.db_instance }}" \
            --set-env-vars="DB_NAME=${{ matrix.service.name == 'core-medical-service' && 'core_medical' || matrix.service.name == 'exams-service' && 'exams_db' || matrix.service.name == 'diagnosis-service' && 'diagnosis_db' || 'surgery_db' }}" \
            --set-env-vars="DB_USER=postgres" \
            --set-env-vars="ALLOWED_HOSTS=*" \
            --set-env-vars="JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" \
            --set-secrets="DB_PASSWORD=${{ matrix.service.name == 'core-medical-service' && 'core-db-password' || matrix.service.name == 'exams-service' && 'exams-db-password' || matrix.service.name == 'diagnosis-service' && 'diagnosis-db-password' || 'surgery-db-password' }}:latest" \
            --timeout=300 \
            --startup-probe="httpGet.path=/health/ready,initialDelaySeconds=10,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/health/live,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"

  setup-load-balancer:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: 'Deploy Load Balancer Configuration'
        run: |
          # Create backend services for each microservice
          gcloud run services add-iam-policy-binding core-medical-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding exams-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding diagnosis-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding surgery-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          # Configure ingress for Load Balancer compatibility
          gcloud run services update core-medical-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update exams-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update diagnosis-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update surgery-service --region=${{ env.REGION }} --ingress=all

      - name: 'Apply Load Balancer Terraform Configuration'
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
        run: |
          cd infrastructure
          terraform init -upgrade
          
          # Clean up any potential state conflicts
          echo "Cleaning up potential state conflicts..."
          terraform state rm google_compute_url_map.main 2>/dev/null || echo "No main URL map in state"
          terraform state rm google_compute_global_forwarding_rule.http 2>/dev/null || echo "No http forwarding rule in state"
          terraform state rm google_compute_global_forwarding_rule.https 2>/dev/null || echo "No https forwarding rule in state"
          
          echo "Attempting to import existing resources..."
          terraform import google_compute_region_network_endpoint_group.core_medical_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/core-medical-neg" || echo "Core Medical NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.exams_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/exams-neg" || echo "Exams NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.diagnosis_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/diagnosis-neg" || echo "Diagnosis NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.surgery_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/surgery-neg" || echo "Surgery NEG import: proceeding..."
          terraform import google_compute_backend_service.core_medical_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/core-medical-backend" || echo "Core Medical Backend import: proceeding..."
          terraform import google_compute_backend_service.exams_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/exams-backend" || echo "Exams Backend import: proceeding..."
          terraform import google_compute_backend_service.diagnosis_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/diagnosis-backend" || echo "Diagnosis Backend import: proceeding..."
          terraform import google_compute_backend_service.surgery_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/surgery-backend" || echo "Surgery Backend import: proceeding..."
          terraform import google_compute_url_map.api_gateway "projects/${{ env.PROJECT_ID }}/global/urlMaps/medical-api-gateway" || echo "API Gateway URL Map import: proceeding..."
          terraform import google_compute_target_http_proxy.http_proxy "projects/${{ env.PROJECT_ID }}/global/targetHttpProxies/medical-http-proxy" || echo "HTTP Proxy import: proceeding..."
          terraform import google_compute_global_forwarding_rule.http_forwarding_rule "projects/${{ env.PROJECT_ID }}/global/forwardingRules/medical-http-forwarding-rule" || echo "HTTP Forwarding Rule import: proceeding..."
          terraform import google_compute_global_address.lb_ip "projects/${{ env.PROJECT_ID }}/global/addresses/medical-lb-ip" || echo "Global Address import: proceeding..."
          echo "Finished attempting to import resources."
          terraform plan
          terraform apply -auto-approve

      - name: 'Output Load Balancer Information'
        run: |
          cd infrastructure
          echo "üåê Load Balancer deployed successfully!"
          echo "üìç Load Balancer IP: $(terraform output -raw load_balancer_ip)"
          echo "üîó Access your microservices at: http://$(terraform output -raw load_balancer_ip)"
          echo ""
          echo "üìã Service endpoints:"
          echo "   Core Medical (Django Admin): http://$(terraform output -raw load_balancer_ip)/"
          echo "   Core Medical Health: http://$(terraform output -raw load_balancer_ip)/health/ready"
          echo "   Exams API: http://$(terraform output -raw load_balancer_ip)/api/examenes/"
          echo "   Diagnosis API: http://$(terraform output -raw load_balancer_ip)/api/diagnosticos/"
          echo "   Surgery API: http://$(terraform output -raw load_balancer_ip)/api/cirugias/"
          echo "   Treatments API: http://$(terraform output -raw load_balancer_ip)/api/tratamientos/"
