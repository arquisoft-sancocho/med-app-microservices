name: Deploy Microservices to GCP

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PROJECT_ID: molten-avenue-460900-a0
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: core-medical-service
            port: 8000
            path: services/core-medical-service
            db_instance: core-medical-db
          - name: exams-service
            port: 8001
            path: services/exams-service
            db_instance: exams-db
          - name: diagnosis-service
            port: 8002
            path: services/diagnosis-service
            db_instance: diagnosis-db
          - name: surgery-service
            port: 8003
            path: services/surgery-service
            db_instance: surgery-db

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Configure Docker to use gcloud as a credential helper'
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}

      - name: 'Build Docker image'
        run: |
          cd ${{ matrix.service.path }}
          docker build -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }} .
          docker tag ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }} ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest

      - name: 'Push Docker image'
        run: |
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest

      - name: 'Deploy to Cloud Run'
        run: |
          # Set base environment variables for all services
          BASE_ENV_VARS="DEBUG=False,DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ matrix.service.db_instance }},DB_NAME=${{ matrix.service.name == 'core-medical-service' && 'core_medical' || matrix.service.name == 'exams-service' && 'exams_db' || matrix.service.name == 'diagnosis-service' && 'diagnosis_db' || 'surgery_db' }},DB_USER=postgres,ALLOWED_HOSTS=*,JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"
          
          # Add GCS-specific environment variables for exams-service
          if [ "${{ matrix.service.name }}" = "exams-service" ]; then
            ENV_VARS="$BASE_ENV_VARS,GCS_BUCKET_NAME=medical-system-files,MAX_FILE_SIZE=10485760"
          else
            ENV_VARS="$BASE_ENV_VARS"
          fi
          
          gcloud run deploy ${{ matrix.service.name }} \
            --image=${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ matrix.service.name }}:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ matrix.service.db_instance }} \
            --set-env-vars="$ENV_VARS" \
            --set-secrets="DB_PASSWORD=${{ matrix.service.name == 'core-medical-service' && 'core-db-password' || matrix.service.name == 'exams-service' && 'exams-db-password' || matrix.service.name == 'diagnosis-service' && 'diagnosis-db-password' || 'surgery-db-password' }}:latest" \
            --timeout=300 \
            --startup-probe="httpGet.path=/health/ready,initialDelaySeconds=10,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/health/live,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"

  setup-gcs-permissions:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup GCS permissions for exams-service'
        run: |
          echo "ü™£ Setting up Google Cloud Storage permissions for exams-service..."
          
          # Ensure the GCS bucket exists
          gsutil mb gs://medical-system-files || echo "Bucket already exists"
          
          # Get the service account email for exams-service
          EXAMS_SA=$(gcloud run services describe exams-service --region=${{ env.REGION }} --format="value(spec.template.spec.serviceAccountName)")
          
          if [ -z "$EXAMS_SA" ]; then
            echo "Using default Compute Engine service account..."
            EXAMS_SA="${{ env.PROJECT_ID }}-compute@developer.gserviceaccount.com"
          fi
          
          echo "üìß Service Account: $EXAMS_SA"
          
          # Grant Storage Object Admin permissions to the service account
          gsutil iam ch serviceAccount:$EXAMS_SA:objectAdmin gs://medical-system-files
          
          # Grant Storage Legacy Bucket Reader permissions (for listing)
          gsutil iam ch serviceAccount:$EXAMS_SA:legacyBucketReader gs://medical-system-files
          
          echo "‚úÖ GCS permissions configured successfully!"
          
          # Verify bucket configuration
          echo "üîç Verifying bucket configuration..."
          gsutil ls -L gs://medical-system-files
          
          echo "üìã Bucket IAM policy:"
          gsutil iam get gs://medical-system-files

  update-microservice-urls:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, setup-gcs-permissions]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Get microservice URLs and update core-medical-service'
        run: |
          echo "üîó Getting microservice URLs..."
          
          # Get the URLs for all microservices
          EXAMS_URL=$(gcloud run services describe exams-service --region=${{ env.REGION }} --format="value(status.url)")
          DIAGNOSIS_URL=$(gcloud run services describe diagnosis-service --region=${{ env.REGION }} --format="value(status.url)")
          SURGERY_URL=$(gcloud run services describe surgery-service --region=${{ env.REGION }} --format="value(status.url)")
          
          echo "üìç Microservice URLs:"
          echo "   Exams Service: $EXAMS_URL"
          echo "   Diagnosis Service: $DIAGNOSIS_URL"
          echo "   Surgery Service: $SURGERY_URL"
          
          # Update core-medical-service with the microservice URLs
          echo "üîÑ Updating core-medical-service with microservice URLs..."
          gcloud run services update core-medical-service \
            --region=${{ env.REGION }} \
            --update-env-vars="EXAMS_SERVICE_URL=$EXAMS_URL" \
            --update-env-vars="DIAGNOSIS_SERVICE_URL=$DIAGNOSIS_URL" \
            --update-env-vars="SURGERY_SERVICE_URL=$SURGERY_URL"
          
          echo "‚úÖ Core medical service updated with microservice URLs!"

  setup-permissions:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, update-microservice-urls]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup permissions and user groups'
        run: |
          echo "üîë Setting up permissions and user groups..."
          
          # Get the core-medical-service URL
          CORE_URL=$(gcloud run services describe core-medical-service --region=${{ env.REGION }} --format="value(status.url)")
          
          echo "üìç Core Medical Service URL: $CORE_URL"
          
          # Wait a moment for the service to be ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 30
          
          # Call the permissions setup endpoint
          echo "üîß Calling permissions setup API..."
          curl -X POST "$CORE_URL/api/setup-permissions/" \
            -H "Content-Type: application/json" \
            -d '{"force": true}' \
            --max-time 120 \
            --retry 3 \
            --retry-delay 10 || echo "‚ö†Ô∏è Permissions setup failed, but continuing..."
          
          # Check permissions status
          echo "üìä Checking permissions status..."
          curl -X GET "$CORE_URL/api/permissions-status/" \
            --max-time 30 \
            --retry 2 || echo "‚ö†Ô∏è Could not check permissions status"
          
          echo "‚úÖ Permissions setup completed!"

  verify-exams-service:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, setup-gcs-permissions, update-microservice-urls, setup-permissions]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Verify Exams Service with File Upload'
        run: |
          echo "üîç Verifying Exams Service functionality..."
          
          # Get the exams service URL
          EXAMS_URL=$(gcloud run services describe exams-service --region=${{ env.REGION }} --format="value(status.url)")
          
          echo "üìç Exams Service URL: $EXAMS_URL"
          
          # Wait for service to be ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 30
          
          # Test health endpoint
          echo "üè• Testing health endpoint..."
          curl -f "$EXAMS_URL/health/ready" --max-time 30 || echo "‚ö†Ô∏è Health check failed"
          
          # Test API documentation
          echo "üìö Testing API documentation..."
          curl -f "$EXAMS_URL/docs" --max-time 30 --write-out "HTTP %{http_code}\n" --silent --output /dev/null || echo "‚ö†Ô∏è Docs endpoint failed"
          
          # Test exams list endpoint
          echo "üìã Testing exams list endpoint..."
          curl -f "$EXAMS_URL/api/examenes/" --max-time 30 --write-out "HTTP %{http_code}\n" --silent --output /dev/null || echo "‚ö†Ô∏è Exams list failed"
          
          # Create a test file for upload
          echo "üìÑ Creating test file for upload verification..."
          echo "Test exam content for integration test" > test_exam.txt
          
          # Test file upload capability (without actually uploading, just check the endpoint exists)
          echo "üì§ Testing file upload endpoint structure..."
          curl -X POST "$EXAMS_URL/api/examenes/" \
            --max-time 30 \
            --write-out "HTTP %{http_code}\n" \
            --silent \
            --output /dev/null \
            -F "nombre=Test Exam via GitHub Actions" \
            -F "descripcion=Integration test exam" \
            -F "archivo=@test_exam.txt" || echo "‚ö†Ô∏è File upload test failed (expected without proper auth)"
          
          echo "‚úÖ Exams Service verification completed!"
          echo "üéØ Service is ready for file uploads with GCS integration!"

  setup-load-balancer:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, update-microservice-urls, setup-permissions, verify-exams-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: 'Deploy Load Balancer Configuration'
        run: |
          # Create backend services for each microservice
          gcloud run services add-iam-policy-binding core-medical-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding exams-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding diagnosis-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          gcloud run services add-iam-policy-binding surgery-service \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.REGION }} || true

          # Configure ingress for Load Balancer compatibility
          gcloud run services update core-medical-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update exams-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update diagnosis-service --region=${{ env.REGION }} --ingress=all
          gcloud run services update surgery-service --region=${{ env.REGION }} --ingress=all

      - name: 'Apply Load Balancer Terraform Configuration'
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
        run: |
          cd infrastructure
          terraform init -upgrade

          # Clean up any potential state conflicts
          echo "Cleaning up potential state conflicts..."
          terraform state rm google_compute_url_map.main 2>/dev/null || echo "No main URL map in state"
          terraform state rm google_compute_global_forwarding_rule.http 2>/dev/null || echo "No http forwarding rule in state"
          terraform state rm google_compute_global_forwarding_rule.https 2>/dev/null || echo "No https forwarding rule in state"

          echo "Attempting to import existing resources..."
          terraform import google_compute_region_network_endpoint_group.core_medical_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/core-medical-neg" || echo "Core Medical NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.exams_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/exams-neg" || echo "Exams NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.diagnosis_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/diagnosis-neg" || echo "Diagnosis NEG import: proceeding..."
          terraform import google_compute_region_network_endpoint_group.surgery_neg "projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/networkEndpointGroups/surgery-neg" || echo "Surgery NEG import: proceeding..."
          terraform import google_compute_backend_service.core_medical_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/core-medical-backend" || echo "Core Medical Backend import: proceeding..."
          terraform import google_compute_backend_service.exams_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/exams-backend" || echo "Exams Backend import: proceeding..."
          terraform import google_compute_backend_service.diagnosis_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/diagnosis-backend" || echo "Diagnosis Backend import: proceeding..."
          terraform import google_compute_backend_service.surgery_backend "projects/${{ env.PROJECT_ID }}/global/backendServices/surgery-backend" || echo "Surgery Backend import: proceeding..."
          terraform import google_compute_url_map.api_gateway "projects/${{ env.PROJECT_ID }}/global/urlMaps/medical-api-gateway" || echo "API Gateway URL Map import: proceeding..."
          terraform import google_compute_target_http_proxy.http_proxy "projects/${{ env.PROJECT_ID }}/global/targetHttpProxies/medical-http-proxy" || echo "HTTP Proxy import: proceeding..."
          terraform import google_compute_global_forwarding_rule.http_forwarding_rule "projects/${{ env.PROJECT_ID }}/global/forwardingRules/medical-http-forwarding-rule" || echo "HTTP Forwarding Rule import: proceeding..."
          terraform import google_compute_global_address.lb_ip "projects/${{ env.PROJECT_ID }}/global/addresses/medical-lb-ip" || echo "Global Address import: proceeding..."
          echo "Finished attempting to import resources."
          terraform plan
          terraform apply -auto-approve

      - name: 'Output Load Balancer Information'
        run: |
          cd infrastructure
          echo "üåê Load Balancer deployed successfully!"
          echo "üìç Load Balancer IP: $(terraform output -raw load_balancer_ip)"
          echo "üîó Access your microservices at: http://$(terraform output -raw load_balancer_ip)"
          echo ""
          echo "üìã Service endpoints:"
          echo "   Core Medical (Django Admin): http://$(terraform output -raw load_balancer_ip)/"
          echo "   Core Medical Health: http://$(terraform output -raw load_balancer_ip)/health/ready"
          echo "   Exams API: http://$(terraform output -raw load_balancer_ip)/api/examenes/"
          echo "   Diagnosis API: http://$(terraform output -raw load_balancer_ip)/api/diagnosticos/"
          echo "   Surgery API: http://$(terraform output -raw load_balancer_ip)/api/cirugias/"
          echo "   Treatments API: http://$(terraform output -raw load_balancer_ip)/api/tratamientos/"
          echo ""
          echo "üîë Permissions System:"
          echo "   Setup Status: http://$(terraform output -raw load_balancer_ip)/api/permissions-status/"
          echo "   User Groups: Administrador, Medico, Medico_de_Junta, Enfermero, Tecnico"
          echo ""
          echo "üéØ Individual microservice URLs are automatically configured:"
          
          # Get individual service URLs for reference
          CORE_URL=$(gcloud run services describe core-medical-service --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "Not available")
          EXAMS_URL=$(gcloud run services describe exams-service --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "Not available")
          DIAGNOSIS_URL=$(gcloud run services describe diagnosis-service --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "Not available")
          SURGERY_URL=$(gcloud run services describe surgery-service --region=${{ env.REGION }} --format="value(status.url)" 2>/dev/null || echo "Not available")
          
          echo "   Core Medical: $CORE_URL"
          echo "   Exams Service: $EXAMS_URL"
          echo "   Diagnosis Service: $DIAGNOSIS_URL"
          echo "   Surgery Service: $SURGERY_URL"
