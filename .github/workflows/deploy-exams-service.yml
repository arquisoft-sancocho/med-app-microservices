name: Deploy Exams Service to GCP

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'services/exams-service/**'
  workflow_dispatch:

env:
  PROJECT_ID: molten-avenue-460900-a0
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev
  SERVICE_NAME: exams-service
  SERVICE_PATH: services/exams-service

jobs:
  deploy-exams:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        timeout-minutes: 5

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
        timeout-minutes: 5

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        timeout-minutes: 5

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}
        timeout-minutes: 5

      - name: Build Docker image
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker build -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:latest
        timeout-minutes: 15

      - name: Push Docker image
        run: |
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:latest
        timeout-minutes: 10

      - name: Deploy to Cloud Run with GCS configuration
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/microservices/${{ env.SERVICE_NAME }}:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:exams-db \
            --set-env-vars="DEBUG=false,GCS_BUCKET_NAME=medical-system-files,MAX_FILE_SIZE=10485760,DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:exams-db,DB_NAME=exams_db,DB_USER=postgres,ALLOWED_HOSTS=*,JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" \
            --set-secrets="DB_PASSWORD=exams-db-password:latest" \
            --timeout=300 \
            --startup-probe="httpGet.path=/health/ready,initialDelaySeconds=10,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/health/live,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"
        timeout-minutes: 10

      - name: Verify deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")

          echo "Service deployed at: $SERVICE_URL"

          # Wait for service to be ready
          sleep 30

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f "$SERVICE_URL/health/ready" || echo "Health check failed"

          # Test API endpoint
          echo "Testing API endpoint..."
          curl -f "$SERVICE_URL/api/examenes/" || echo "API test failed"
        timeout-minutes: 5

      - name: Setup GCS permissions
        run: |
          # Grant Cloud Run service account permissions to GCS bucket
          SERVICE_ACCOUNT=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(spec.template.spec.serviceAccountName)")

          if [ -z "$SERVICE_ACCOUNT" ]; then
            # Get default Cloud Run service account
            SERVICE_ACCOUNT="${{ env.PROJECT_ID }}-compute@developer.gserviceaccount.com"
          fi

          echo "Setting up GCS permissions for service account: $SERVICE_ACCOUNT"

          # Grant storage admin permissions for the bucket
          gsutil iam ch serviceAccount:$SERVICE_ACCOUNT:objectAdmin gs://medical-system-files
          gsutil iam ch serviceAccount:$SERVICE_ACCOUNT:legacyBucketReader gs://medical-system-files
        timeout-minutes: 5

      - name: Test file upload functionality
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")

          echo "Testing file upload functionality..."

          # Create a test file
          echo "Test content for exam file" > test-file.txt

          # Test file upload endpoint (this will fail if file upload is not working)
          curl -X POST "$SERVICE_URL/api/examenes/" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@test-file.txt" \
            -F "titulo=Test Exam" \
            -F "descripcion=Test Description" \
            -F "paciente_id=1" \
            || echo "File upload test failed - this might be expected if authentication is required"

          # Clean up test file
          rm -f test-file.txt
        timeout-minutes: 5

      - name: Output service information
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")

          echo "::notice::Exams Service deployed successfully"
          echo "::notice::Service URL: $SERVICE_URL"
          echo "::notice::API Endpoint: $SERVICE_URL/api/examenes/"
          echo "::notice::Health Check: $SERVICE_URL/health/ready"
          echo "::notice::GCS Bucket: medical-system-files configured"

          # Save URL to GitHub output
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        id: output
